Задача:

1) Загрузить книгу с https://www.gutenberg.org/

2) Программа должна прочитать файл и показать число вхождений каждого слова файла (в порядке убывания числа вхождений).

3) Этапы решения задачи.

Этап 1) Написать программу которая открывает файл, определяет его размер и выводит на экран.

Для Windows использовать WinAPI:

CreateFile - открыть файл
GetFileSizeEx - получить размер файла -> Size
Text = new char[Size+1] - выделить буфер
ReadFile - прочитать файл в буфер
CloseHandle - закрыть файл
delete[] - удалить буфер

Для Linux см. пример

https://github.com/VeretennikovAlexander/CPP-Public/tree/master/Examples/ReadFileToBuffer

Этап 2) Добавить возможность чтения содержимого файла в буфер Text.

Этап 3) Добавить возможность парсинга буфера Text и выделения в нем слов.

При парсинге все символы кроме букв и цифр рассматривать как пробелы.
Можно использовать функции isalnum, tolower.

https://en.cppreference.com/w/cpp/string/byte/isalnum

Этап 4) Добавить возможность добавления слов в ассоциативный массив map
(подсчет числа вхождений с использованием map) и вывода результатов.

Этап 5) Добавить возможность вывода результата в отсортированном виде.
Добавить вывод только первых десяти самых часто встречающихся слов с их счетчиками вхождений.

Для этого можно перенести данные map в vector и отсортировать их по убыванию частоты встречаемости слова в тексте.

См. пример
https://github.com/VeretennikovAlexander/CPP-Public/tree/master/Examples/ReadFileToBuffer

Этап 6) Добавить замеры времени работы алгоритма.

Начало замера времени после чтения файла.

Конец замера времени перед выводом результатов.

(Замеряем только сам алгоритм, ввод-вывод исключаем).

Этап 7) Реализовать менеджер памяти.

Этап 8) Реализовать вторую программу, где используется map<string,size_t>.
Сравнить времена работы.

4) Требования:

Чтение данных файла осуществляется за одну операцию чтения в один буфер, размер которого совпадает с размером файла.

Программа должна показать время выполнения в миллисекундах.

Должен быть реализован свой менеджер памяти для std:map.

Не использовать объекты "string".

Использовать char* для строк.

При парсинге текста использовать только буфер Text, другие строки не выделять.

Менеджер памяти должен выделить большой буфер (например, 1MB).

Далее данный буфер должен использоватся для обработки запросов выделения памяти (при работе с map).

То есть, при первом запросе выделяем место в начале буфера.

Свободное место уменьшается.

При последующем запросе используем начало свободного места.

И так далее.

Если место в буфере закончится, нужно выделить еще один буфер, связав его с предыдущим, и так далее.

Все буферы должны быть освобождены в конце программы автоматически.

(Это означает, что список этих буферов должен где-то быть, начало буфера может быть использовано для полей связи элементов списка, а место
для выделения памяти начинаться после этих полей).

Тестовый текстовый файл должен быть больше 1 Мб.

5) Реализовать альтернативную программу, которая использует map<string, size_t>, без своего менеджера памяти
и сравнить время выполнения.

Смысл задачи:

Сравним производительность при использовании стандартного аллокатора и со своим простым аллокатором.

Примечание 1.
Буфер выделяем с помощью new char[Size+1], чтобы вставить 0 в конце буфера.
См. пример
https://github.com/VeretennikovAlexander/CPP-Public/tree/master/Examples/ReadFileToBuffer

Примечание 2.
Не забывать инициализировать переменные, если это нужно в конкретном случае.

